# Top 100 games Name ordered by Avg_user_rating first then by Name. (SQLex04)
GET appstore_game/_search
{
  "_source": ["Name", "Average User Rating"],
  "sort": [
    {
      "Average User Rating": { "order": "desc" },
      "Name.keyword": {}
    }
  ],
  "size": 100
}
--> not same result as SQL because of Top Case / Lower Case sort + no filter for games starting with nb

# Show the Name and Language of games strictly between 5 and 10 euros. (SQLex05)
GET appstore_game/_search
{
  "_source": ["Name", "Languages", "Price"],
  "size": 10000,
  "query": 
  {
    "bool": 
    {
      "filter": 
      {
        "range": {
          "Price": {
            "gte": 5,
            "lte": 10
          }
        }
      }
    }
  }
}


#shows the name of developpers starting with 'K' (case sensitive) and involved in casual games. (SQLex06)
GET appstore_game/_search
{
  "_source": "Developer", 
  "query": 
  {
    "bool": {
      "should": [
        {
          "prefix": {
            "Developer.keyword": {
              "value": "K"
            }
          }
        }
      ]
    }
  }
}

# shows the Name of developpers involved in games released before 01/08/2008 included and update after 01/01/2018 included. (SQLex07)
GET appstore_game/_search
{
  "_source": ["Developer", "Original Release Date", "Current Version Release Date"],
  "query":
  {
    "bool":
    {
      "must":
      [
        {
          "range":
          {
            "Original Release Date":
            {
              "lte": "01/08/2008"
            }
          }
        },
        {
          "range":
          {
            "Current Version Release Date":
            {
              "gte": "01/01/2018"
            }
          }
        }
      ]
    }
  }
}


# shows the name of the games with "battle royale" in their description and with an URL that will redirect to facebook.com. (SQLex08)
# change parsing of the URL to get the facebook part of the query
GET appstore_game/_search
{
  "_source": "Name",
  "query": 
  {
    "match": {
      "Name": "battle royale"
    }
  }
}



# show the first 10 games that generated the most benefits. see aggs (SQLex09)
# Benefits are calculated with the number of users who voted times the price of the game
GET appstore_game/_search
{
  
}
--> Painless....






# Find the month where the most important number of games are sold. see aggs (SQLex10)
GET appstore_game/_search
{
  
}





#Analyze the price distribution of games by plotting an histogram of price distribution.  doing visualisation exo 11 (SQLex11)







#You must write a query that will help you filter your games according to the number of languages they have, and then filter out the ones that have strictly less than 3 languages. Then you need to select the top 5 genres where those games appear.   mmmm ??!! (SQLex12)




